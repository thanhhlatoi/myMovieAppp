// VideoApiService.js - X·ª≠ l√Ω Master Playlist v√† Sub-playlist HLS
class VideoApiService {
    constructor() {
        this.baseURL = 'http://192.168.1.73:8082/api/videofilm';
    }

    async handleResponse(response) {
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText || response.statusText}`);
        }

        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
            return await response.json();
        } else if (contentType && (contentType.includes('application/x-mpegURL') || contentType.includes('text'))) {
            return await response.text(); // Lu√¥n tr·∫£ v·ªÅ text cho HLS playlist
        } else {
            return await response.blob();
        }
    }

    buildUrlWithParams(endpoint, params = {}) {
        const url = new URL(`${this.baseURL}${endpoint}`);
        Object.keys(params).forEach(key => {
            if (params[key] !== null && params[key] !== undefined) {
                url.searchParams.append(key, params[key]);
            }
        });
        return url.toString();
    }

    // === BASIC VIDEO API ===
    async getVideoById(id) {
        try {
            const response = await fetch(`${this.baseURL}/${id}`);
            return await this.handleResponse(response);
        } catch (error) {
            console.error('Error fetching video by ID:', error);
            throw error;
        }
    }

    async getRecentVideos() {
        try {
            const response = await fetch(`${this.baseURL}/recent`);
            return await this.handleResponse(response);
        } catch (error) {
            console.error('Error fetching recent videos:', error);
            throw error;
        }
    }

    async getVideosByStatus(status) {
        try {
            const url = this.buildUrlWithParams('/by-status', { status });
            const response = await fetch(url);
            return await this.handleResponse(response);
        } catch (error) {
            console.error('Error fetching videos by status:', error);
            throw error;
        }
    }

    // === HLS STREAMING API ===

    /**
     * 1. L·∫•y MASTER PLAYLIST - Ch·ª©a danh s√°ch c√°c quality levels
     * URL: http://192.168.1.73:8082/api/videofilm/stream/web/2
     * Tr·∫£ v·ªÅ: Master playlist v·ªõi danh s√°ch c√°c sub-playlist (quality levels)
     */
    async getMasterPlaylist(videoId) {
        try {
            console.log(`üé¨ Getting master playlist for video ${videoId}`);

            // Lu√¥n s·ª≠ d·ª•ng fetch + text() ƒë·ªÉ l·∫•y n·ªôi dung master playlist
            const response = await fetch(`${this.baseURL}/stream/web/${videoId}`);
            if (!response.ok) {
                throw new Error(`Failed to fetch master playlist: ${response.status} ${response.statusText}`);
            }

            // Lu√¥n ƒë·ªçc response d∆∞·ªõi d·∫°ng text
            const content = await response.text();
            console.log('üìã Master playlist content:', content);
            return content;
        } catch (error) {
            console.error('Error fetching master playlist:', error);
            throw error;
        }
    }

    /**
     * 2. L·∫•y SUB-PLAYLIST - Ch·ª©a danh s√°ch segments cho quality c·ª• th·ªÉ
     * URL: http://192.168.1.73:8082/api/videofilm/playlist/web/2/index_0.m3u8
     * Tr·∫£ v·ªÅ: Sub-playlist v·ªõi danh s√°ch segments (.ts files)
     */
    async getSubPlaylist(videoId, playlistName) {
        try {
            console.log(`üéØ Getting sub-playlist: ${playlistName} for video ${videoId}`);

            // Lu√¥n s·ª≠ d·ª•ng fetch + text() ƒë·ªÉ l·∫•y n·ªôi dung sub-playlist
            const response = await fetch(`${this.baseURL}/playlist/web/${videoId}/${playlistName}`);
            if (!response.ok) {
                throw new Error(`Failed to fetch sub-playlist: ${response.status} ${response.statusText}`);
            }

            // Lu√¥n ƒë·ªçc response d∆∞·ªõi d·∫°ng text
            const content = await response.text();
            console.log(`üìÑ Sub-playlist ${playlistName} content:`, content);
            return content;
        } catch (error) {
            console.error(`Error fetching sub-playlist ${playlistName}:`, error);
            throw error;
        }
    }

    /**
     * 3. L·∫•y VIDEO SEGMENT - File .ts ch·ª©a video data
     * URL: http://192.168.1.73:8082/api/videofilm/segment/web/2/output_0_00000.ts
     */
    async getVideoSegment(videoId, segmentName) {
        try {
            const response = await fetch(`${this.baseURL}/segment/web/${videoId}/${segmentName}`);
            return await response.arrayBuffer(); // Tr·∫£ v·ªÅ binary data
        } catch (error) {
            console.error(`Error fetching segment ${segmentName}:`, error);
            throw error;
        }
    }

    // === URL GENERATORS ===
    getMasterPlaylistUrl(videoId) {
        return `${this.baseURL}/stream/web/${videoId}`;
    }

    getSubPlaylistUrl(videoId, playlistName) {
        return `${this.baseURL}/playlist/web/${videoId}/${playlistName}`;
    }

    getSegmentUrl(videoId, segmentName) {
        return `${this.baseURL}/segment/web/${videoId}/${segmentName}`;
    }

    // === HLS PARSING METHODS ===

    /**
     * Parse MASTER PLAYLIST ƒë·ªÉ l·∫•y danh s√°ch quality levels
     * Input: Master playlist content
     * Output: Array of quality objects
     */
    parseMasterPlaylist(masterContent) {
        // N·∫øu masterContent kh√¥ng ph·∫£i l√† string, n√©m l·ªói
        if (typeof masterContent !== 'string') {
            console.error('L·ªói: masterContent kh√¥ng ph·∫£i l√† string:', typeof masterContent);
            throw new Error('N·ªôi dung master playlist kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i string)');
        }

        const lines = masterContent.split('\n');
        const qualities = [];

        console.log('üîç Parsing master playlist...');

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trim();

            // T√¨m d√≤ng EXT-X-STREAM-INF (ch·ª©a th√¥ng tin quality)
            if (line.startsWith('#EXT-X-STREAM-INF:')) {
                console.log(`Found quality line: ${line}`);

                // Parse attributes t·ª´ d√≤ng EXT-X-STREAM-INF
                const attributes = this.parseStreamInfAttributes(line);

                // D√≤ng ti·∫øp theo ch·ª©a playlist name
                if (i + 1 < lines.length) {
                    const nextLine = lines[i + 1].trim();
                    if (nextLine && !nextLine.startsWith('#')) {
                        // Extract playlist name t·ª´ URL
                        const playlistName = nextLine.includes('/')
                            ? nextLine.substring(nextLine.lastIndexOf('/') + 1)
                            : nextLine;

                        const quality = {
                            playlistName: playlistName, // VD: "index_0.m3u8"
                            fullUrl: nextLine, // URL ƒë·∫ßy ƒë·ªß
                            bandwidth: parseInt(attributes.BANDWIDTH || 0),
                            resolution: attributes.RESOLUTION || null,
                            codecs: attributes.CODECS ? attributes.CODECS.replace(/"/g, '') : null,
                            label: this.generateQualityLabel(attributes), // VD: "720p", "1080p"
                        };

                        qualities.push(quality);
                        console.log(`‚úÖ Found quality: ${quality.label} (${quality.playlistName})`);
                    }
                }
            }
        }

        // S·∫Øp x·∫øp theo bandwidth (ch·∫•t l∆∞·ª£ng cao nh·∫•t tr∆∞·ªõc)
        qualities.sort((a, b) => b.bandwidth - a.bandwidth);

        console.log(`üìä Found ${qualities.length} quality levels:`, qualities);
        return qualities;
    }

    /**
     * Parse SUB-PLAYLIST ƒë·ªÉ l·∫•y danh s√°ch segments
     * Input: Sub-playlist content
     * Output: Array of segment objects
     */
    parseSubPlaylist(subContent) {
        // N·∫øu subContent kh√¥ng ph·∫£i l√† string, n√©m l·ªói
        if (typeof subContent !== 'string') {
            console.error('L·ªói: subContent kh√¥ng ph·∫£i l√† string:', typeof subContent);
            throw new Error('N·ªôi dung sub-playlist kh√¥ng h·ª£p l·ªá (kh√¥ng ph·∫£i string)');
        }

        const lines = subContent.split('\n');
        const segments = [];
        let duration = 0;

        console.log('üîç Parsing sub-playlist...');

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trim();

            // T√¨m d√≤ng EXTINF (ch·ª©a th√¥ng tin duration)
            if (line.startsWith('#EXTINF:')) {
                const durationMatch = line.match(/#EXTINF:([0-9.]+)/);
                if (durationMatch) {
                    duration = parseFloat(durationMatch[1]);
                }

                // D√≤ng ti·∫øp theo ch·ª©a segment URL
                if (i + 1 < lines.length) {
                    const nextLine = lines[i + 1].trim();
                    if (nextLine && !nextLine.startsWith('#')) {
                        // Extract segment name t·ª´ URL
                        const segmentName = nextLine.includes('/')
                            ? nextLine.substring(nextLine.lastIndexOf('/') + 1)
                            : nextLine;

                        const segment = {
                            segmentName: segmentName, // VD: "output_0_00000.ts"
                            fullUrl: nextLine, // URL ƒë·∫ßy ƒë·ªß
                            duration: duration,
                            index: segments.length
                        };

                        segments.push(segment);
                    }
                }
            }
        }

        console.log(`üìπ Found ${segments.length} segments in sub-playlist`);
        return segments;
    }

    /**
     * Parse attributes t·ª´ d√≤ng EXT-X-STREAM-INF
     */
    parseStreamInfAttributes(line) {
        const attributes = {};
        const attrString = line.substring(line.indexOf(':') + 1);

        // Regex ƒë·ªÉ parse c√°c attributes (BANDWIDTH=1500000,RESOLUTION=1920x1080,etc.)
        const regex = /([A-Z-]+)=([^,]+)/g;
        let match;

        while ((match = regex.exec(attrString)) !== null) {
            const key = match[1];
            let value = match[2];

            // X·ª≠ l√Ω quoted values
            if (value.startsWith('"') && value.endsWith('"')) {
                value = value.slice(1, -1);
            }

            attributes[key] = value;
        }

        return attributes;
    }

    /**
     * Generate quality label t·ª´ attributes (720p, 1080p, etc.)
     */
    generateQualityLabel(attributes) {
        if (attributes.RESOLUTION) {
            // Extract height t·ª´ resolution (1920x1080 -> 1080p)
            const heightMatch = attributes.RESOLUTION.match(/\d+x(\d+)/);
            if (heightMatch) {
                return `${heightMatch[1]}p`;
            }
            return attributes.RESOLUTION;
        }

        if (attributes.BANDWIDTH) {
            // Fallback to bandwidth label
            const bandwidth = parseInt(attributes.BANDWIDTH);
            if (bandwidth >= 1000000) {
                return `${Math.round(bandwidth / 1000000)}Mbps`;
            }
            return `${Math.round(bandwidth / 1000)}kbps`;
        }

        return 'Unknown Quality';
    }

    // === HIGH-LEVEL METHODS ===

    /**
     * L·∫•y t·∫•t c·∫£ quality levels cho video
     */
    async getAvailableQualities(videoId) {
        try {
            console.log(`üéØ Getting available qualities for video ${videoId}`);

            // 1. L·∫•y master playlist
            const masterContent = await this.getMasterPlaylist(videoId);

            // 2. Parse ƒë·ªÉ l·∫•y quality levels
            const qualities = this.parseMasterPlaylist(masterContent);

            // 3. Th√™m URL ƒë·∫ßy ƒë·ªß cho m·ªói quality
            const qualitiesWithUrls = qualities.map(quality => ({
                ...quality,
                url: this.getSubPlaylistUrl(videoId, quality.playlistName)
            }));

            return qualitiesWithUrls;
        } catch (error) {
            console.error('Error getting available qualities:', error);
            throw error;
        }
    }

    /**
     * L·∫•y segments cho quality c·ª• th·ªÉ
     */
    async getSegmentsForQuality(videoId, playlistName) {
        try {
            console.log(`üé¨ Getting segments for quality: ${playlistName}`);

            // 1. L·∫•y sub-playlist
            const subContent = await this.getSubPlaylist(videoId, playlistName);

            // 2. Parse ƒë·ªÉ l·∫•y segments
            const segments = this.parseSubPlaylist(subContent);

            // 3. Th√™m URL ƒë·∫ßy ƒë·ªß cho m·ªói segment
            const segmentsWithUrls = segments.map(segment => ({
                ...segment,
                url: this.getSegmentUrl(videoId, segment.segmentName)
            }));

            return segmentsWithUrls;
        } catch (error) {
            console.error(`Error getting segments for quality ${playlistName}:`, error);
            throw error;
        }
    }

    /**
     * Test to√†n b·ªô HLS structure cho video
     */
    async testHLSStructure(videoId) {
        try {
            console.log(`üîß Testing HLS structure for video ${videoId}`);

            // 1. Test master playlist
            console.log('1. Testing master playlist...');
            const masterUrl = this.getMasterPlaylistUrl(videoId);
            console.log(`Master URL: ${masterUrl}`);

            const qualities = await this.getAvailableQualities(videoId);
            console.log(`‚úÖ Found ${qualities.length} qualities`);

            // 2. Test sub-playlists
            console.log('2. Testing sub-playlists...');
            const subPlaylistTests = [];

            for (const quality of qualities) {
                try {
                    const segments = await this.getSegmentsForQuality(videoId, quality.playlistName);
                    console.log(`‚úÖ Quality ${quality.label}: ${segments.length} segments`);

                    subPlaylistTests.push({
                        quality: quality.label,
                        playlistName: quality.playlistName,
                        segmentCount: segments.length,
                        isValid: segments.length > 0
                    });
                } catch (e) {
                    console.error(`‚ùå Quality ${quality.label} failed:`, e.message);
                    subPlaylistTests.push({
                        quality: quality.label,
                        playlistName: quality.playlistName,
                        segmentCount: 0,
                        isValid: false,
                        error: e.message
                    });
                }
            }

            // 3. Test sample segments
            console.log('3. Testing sample segments...');
            if (qualities.length > 0) {
                const firstQuality = qualities[0];
                const segments = await this.getSegmentsForQuality(videoId, firstQuality.playlistName);

                if (segments.length > 0) {
                    const firstSegment = segments[0];
                    const segmentUrl = this.getSegmentUrl(videoId, firstSegment.segmentName);
                    console.log(`Testing first segment: ${segmentUrl}`);

                    try {
                        const response = await fetch(segmentUrl, { method: 'HEAD' });
                        if (response.ok) {
                            console.log(`‚úÖ Sample segment accessible`);
                        } else {
                            console.error(`‚ùå Sample segment returned: ${response.status}`);
                        }
                    } catch (e) {
                        console.error(`‚ùå Sample segment test failed:`, e.message);
                    }
                }
            }

            return {
                valid: subPlaylistTests.some(test => test.isValid),
                qualities: qualities,
                subPlaylistTests: subPlaylistTests
            };

        } catch (error) {
            console.error('‚ùå HLS structure test failed:', error);
            return {
                valid: false,
                error: error.message
            };
        }
    }

    // === UTILITY METHODS ===

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    formatDuration(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = Math.floor(seconds % 60);

        if (hours > 0) {
            return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        } else {
            return `${minutes}:${secs.toString().padStart(2, '0')}`;
        }
    }

    getStatusDisplayName(status) {
        const statusMap = {
            'UPLOADING': 'ƒêang t·∫£i l√™n',
            'PROCESSING': 'ƒêang x·ª≠ l√Ω',
            'COMPLETED': 'Ho√†n th√†nh',
            'FAILED': 'Th·∫•t b·∫°i'
        };
        return statusMap[status] || status;
    }

    getStatusColor(status) {
        const colorMap = {
            'UPLOADING': 'bg-blue-600',
            'PROCESSING': 'bg-yellow-600',
            'COMPLETED': 'bg-green-600',
            'FAILED': 'bg-red-600'
        };
        return colorMap[status] || 'bg-gray-600';
    }
}

export default VideoApiService;
